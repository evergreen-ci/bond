stepback: false

#######################################
#         YAML Templates              #
#######################################
variables:
  - &run-build
    # runs a build operation. The task name in evergreen should
    # correspond to a make target for the build operation.
    name: test
    commands:
      - func: run-make
        vars: { target: "${task_name}" }

#######################################
#              Functions              #
#######################################
functions:
  get-project:
    command: git.get_project
    type: system
    params:
      directory: gopath/src/github.com/evergreen-ci/bond
  run-make:
    command: subprocess.exec
    type: test
    params:
      working_dir: gopath/src/github.com/evergreen-ci/bond
      binary: make
      args: ["${target}"]
      include_expansions_in_env: ["DISABLE_COVERAGE", "GOROOT", "RACE_DETECTOR"]
      env:
        GOPATH: ${workdir}/gopath
  parse-results:
    command: gotest.parse_files
    type: setup
    params:
      files:
        - "gopath/src/github.com/evergreen-ci/bond/build/output.*"

#######################################
#                Tasks                #
#######################################
tasks:
  - <<: *run-build
    tags: ["test"]
    name: test-bond

  - <<: *run-build
    tags: ["test"]
    name: test-recall

  - <<: *run-build
    tags: ["report"]
    name: lint-bond

  - <<: *run-build
    tags: ["report"]
    name: lint-recall

task_groups:
  - name: lintGroup
    tasks: [ ".report"]
    max_hosts: 2
    setup_group:
      - func: get-project
    setup_task:
      - func: run-make
        vars: { target: "clean-results" }
    teardown_task:
      - func: parse-results
  - name: testGroup
    tasks: [ ".test"]
    max_hosts: 2
    setup_group:
      - func: get-project
      - func: run-make
        vars: { target: "docker-setup" }
        variants:
          - ubuntu
    setup_task:
      - func: run-make
        vars: { target: "clean-results" }
    teardown_task:
      - func: run-make
        vars: { target: "docker-cleanup" }
        variants:
          - ubuntu
      - func: parse-results

#######################################
#           Buildvariants             #
#######################################
buildvariants:
  - name: race-detector
    display_name: Race Detector (Arch Linux)
    expansions:
      DISABLE_COVERAGE: true
      GOROOT: /opt/golang/go1.16
      RACE_DETECTOR: true
    run_on:
      - archlinux-new-small
      - archlinux-new-large
    tasks:
      - name: "testGroup"

  - name: lint
    display_name: Lint (Arch Linux)
    expansions:
      DISABLE_COVERAGE: true
      GOROOT: /opt/golang/go1.16
    run_on:
      - archlinux-new-small
      - archlinux-new-large
    tasks: 
      - name: "lintGroup"

  - name: ubuntu
    display_name: Ubuntu 18.04
    expansions:
      DISABLE_COVERAGE: true
      GOROOT: /opt/golang/go1.16
    run_on:
      - ubuntu1804-small
      - ubuntu1804-large
    tasks:
      - name: "testGroup"

  - name: macos
    display_name: macOS
    expansions:
      DISABLE_COVERAGE: true
      GOROOT: /opt/golang/go1.16
    run_on:
      - macos-1014
    tasks:
      - name: "testGroup"

  - name: windows
    display_name: Windows
    run_on:
      - windows-64-vs2017-small
      - windows-64-vs2017-large
    expansions:
      DISABLE_COVERAGE: true
      GOROOT: C:/golang/go1.16
    tasks:
      - name: "testGroup"
